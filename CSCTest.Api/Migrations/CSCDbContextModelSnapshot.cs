// <auto-generated />
using CSCTest.DAL.EF;
using CSCTest.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CSCTest.Api.Migrations
{
    [DbContext(typeof(CSCDbContext))]
    partial class CSCDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CSCTest.Data.Entities.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("CSCTest.Data.Entities.BusinessFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryBusinessId");

                    b.Property<int>("FamilyId");

                    b.HasKey("Id");

                    b.HasAlternateKey("CountryBusinessId", "FamilyId");

                    b.HasIndex("FamilyId");

                    b.ToTable("BusinessFamilies");
                });

            modelBuilder.Entity("CSCTest.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CSCTest.Data.Entities.CountryBusiness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BusinessId");

                    b.Property<int>("CountryId");

                    b.HasKey("Id");

                    b.HasAlternateKey("CountryId", "BusinessId");

                    b.HasIndex("BusinessId");

                    b.ToTable("CountryBusinesses");
                });

            modelBuilder.Entity("CSCTest.Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FamilyOfferingId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FamilyOfferingId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CSCTest.Data.Entities.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BusinessId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("CSCTest.Data.Entities.FamilyOffering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BusinessFamilyId");

                    b.Property<int>("OfferingId");

                    b.HasKey("Id");

                    b.HasAlternateKey("BusinessFamilyId", "OfferingId");

                    b.HasIndex("OfferingId");

                    b.ToTable("FamilyOfferings");
                });

            modelBuilder.Entity("CSCTest.Data.Entities.Offering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FamilyId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Offerings");
                });

            modelBuilder.Entity("CSCTest.Data.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("CSCTest.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CSCTest.Data.Entities.BusinessFamily", b =>
                {
                    b.HasOne("CSCTest.Data.Entities.CountryBusiness", "CountryBusiness")
                        .WithMany("BusinessFamilies")
                        .HasForeignKey("CountryBusinessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSCTest.Data.Entities.Family", "Family")
                        .WithMany("BusinessFamilies")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CSCTest.Data.Entities.Country", b =>
                {
                    b.HasOne("CSCTest.Data.Entities.Organization", "Organization")
                        .WithMany("Countries")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSCTest.Data.Entities.CountryBusiness", b =>
                {
                    b.HasOne("CSCTest.Data.Entities.Business", "Business")
                        .WithMany("CountryBusinesses")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSCTest.Data.Entities.Country", "Country")
                        .WithMany("CountryBusinesses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSCTest.Data.Entities.Department", b =>
                {
                    b.HasOne("CSCTest.Data.Entities.FamilyOffering", "FamilyOffering")
                        .WithMany("Departments")
                        .HasForeignKey("FamilyOfferingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSCTest.Data.Entities.Family", b =>
                {
                    b.HasOne("CSCTest.Data.Entities.Business", "Business")
                        .WithMany("Families")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSCTest.Data.Entities.FamilyOffering", b =>
                {
                    b.HasOne("CSCTest.Data.Entities.BusinessFamily", "BusinessFamily")
                        .WithMany("FamilyOfferings")
                        .HasForeignKey("BusinessFamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSCTest.Data.Entities.Offering", "Offering")
                        .WithMany("FamilyOfferings")
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CSCTest.Data.Entities.Offering", b =>
                {
                    b.HasOne("CSCTest.Data.Entities.Family", "Family")
                        .WithMany("Offerings")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSCTest.Data.Entities.Organization", b =>
                {
                    b.HasOne("CSCTest.Data.Entities.User", "User")
                        .WithMany("Organizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
